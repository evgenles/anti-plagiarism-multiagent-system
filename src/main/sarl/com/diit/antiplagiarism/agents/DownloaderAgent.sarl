/** 
 * 
 */
package com.diit.antiplagiarism.agents

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import com.diit.antiplagiarism.events.TaskToDo
import io.sarl.core.DefaultContextInteractions
import com.diit.antiplagiarism.helpers.DomainHelper
import java.io.InputStream
import java.net.URL
import java.nio.file.Paths
import java.io.File
import java.nio.file.StandardCopyOption
import java.nio.file.Files
import com.diit.antiplagiarism.events.FileDownloadEvent
import com.diit.antiplagiarism.models.StateEnum

/** 
 * @author evgenles
 * 
 */
agent DownloaderAgent {
	uses DefaultContextInteractions, Logging
	val baseDir = "~/APMSDocs"
	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		info("Downloader agent started on " + DomainHelper.GetIp)

	}

	on TaskToDo {
		var task = occurrence.Task
		try{
			new File(baseDir).mkdir
			val path = baseDir + "/" + task.Name
			var in = new URL(task.Url).openStream
			
			Files.copy(in, Paths.get(path), StandardCopyOption.REPLACE_EXISTING)
			task.Path = path
			emit(new FileDownloadEvent(task.Url, StateEnum.Success, task.TaskId))
		}
		catch (e : Exception) {
			emit(new FileDownloadEvent(task.Url, StateEnum.Failed, task.TaskId, e.toString))
		}
		
	}
	
	on Destroy {
		// Event trigger when the agent is destroyed from the system.
		// You should put all the resource releasing statements in this block of code.
		info("The agent was stopped.")
	}

	on AgentSpawned {
		// A new agent has been spawned in our context.
	}

	on AgentKilled {
		// A new agent has been killed in our context.
	}

	on ContextJoined {
		// Event trigger when an agent of the level joins a shared context.
		// Sent to a agent of the same level.
	}

	on ContextLeft {
		// Event trigger when an agent of the level jleaves a shared context.
		// Sent to a agent of the same level.
	}

	on MemberJoined {
		// Event trigger when an agent joins one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}

	on MemberLeft {
		// Event trigger when an agent leaves one of our shared super-holons.
		// Sent to all members of the considered super-holon.
	}
}
